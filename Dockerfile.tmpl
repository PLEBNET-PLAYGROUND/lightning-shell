ARG lnd_version=v0.14.1-beta

ARG balanceofsatoshis_tag=v11.52.3

FROM golang:1.17-${DEBIAN_VERSION} AS golang-builder

ARG arch

ENV GOARCH=${arch}
ENV GOOS=linux

RUN apt-get update \
    && apt-get install -y bison build-essential cmake curl git gnupg libaspell-dev libcurl4-gnutls-dev libgcrypt20-dev libgnutls28-dev libjson-c-dev libncursesw5-dev libwebsockets-dev pkg-config pandoc python3 python3-pip python3-venv zlib1g-dev \
    && apt clean all

RUN curl -sSL https://install.python-poetry.org | python3 -

RUN pip3 install jinja2-cli

WORKDIR /build

COPY . /build

RUN cd /build/apps/circuitbreaker && mkdir bin && go build -o bin/circuitbreaker

RUN cd /build/apps/libwebsockets && mkdir build && cd build && cmake .. -DLWS_WITH_LIBUV=ON && make && make install

ARG lnd_version
RUN curl -sSL -o /build/lnd-linux-${arch}-${lnd_version}.tar.gz https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz
RUN curl -sSL -o /build/manifest-guggero-${lnd_version}.sig https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig
RUN curl -sSL -o /build/manifest-${lnd_version}.txt https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt
RUN curl https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --import
RUN cd /build && gpg --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt && tar xzf lnd-linux-${arch}-${lnd_version}.tar.gz && mv lnd-linux-${arch}-${lnd_version} /lnd

RUN cd /build/apps/lntop && mkdir bin && go build -o bin/lntop cmd/lntop/main.go

RUN cd /build/apps/mempool-cli && mkdir bin && go build -o bin/mempool-cli

RUN cd /build/apps/sc-im/src && make

RUN cd /build/apps/suez && /root/.local/bin/poetry export -f requirements.txt --output requirements.txt --without-hashes

RUN cd /build/apps/ttyd && mkdir build && cd build && cmake .. && make

RUN cd /build/apps/weechat && mkdir build && cd build && cmake .. -DENABLE_PHP=OFF -DENABLE_PERL=OFF -DENABLE_RUBY=OFF -DENABLE_TCL=OFF -DENABLE_LUA=OFF -DENABLE_GUILE=OFF && make && make install

RUN cd /build/apps/whatsat && mkdir bin && go build -o bin/whatsat

RUN jinja2 /build/apps/apps.7.md /build/apps/apps.json | pandoc -s -t man | gzip > /build/apps/apps.7.gz

# VERSION_SPECIFIC_BUILD_STEPS

FROM rustlang/rust:nightly-${DEBIAN_VERSION}-slim AS rust-builder

RUN apt-get update \
    && apt-get install -y git gzip libssl-dev pandoc pkg-config \
    && apt clean all

WORKDIR /build

COPY . /build

RUN cd /build/apps/csview && cargo build --release

RUN cd /build/apps/dog && cargo build --release
RUN pandoc /build/apps/dog/man/dog.1.md -s -t man | gzip > /build/apps/dog/man/dog.1.gz

RUN cd /build/apps/gping && cargo build --release

RUN cd /build/apps/oha && cargo build --release

#RUN cd /build/apps/tickrs && cargo build --release

FROM node:16-${DEBIAN_VERSION}-slim

ARG balanceofsatoshis_tag
RUN npm i -g balanceofsatoshis@${balanceofsatoshis_tag}

RUN echo "deb http://deb.debian.org/debian ${DEBIAN_VERSION}-backports main" | tee -a /etc/apt/sources.list

RUN apt update \
    && apt upgrade -y \
    && apt install -y --no-install-recommends bc ca-certificates curl git iputils-ping jq libc6 libcap2 libssl1.1 libuv1 links man mc micro nano procps python3 python3-pip python3-venv python3-wheel screen sysstat telnet tini tmux vim zlib1g <VERSION_SPECIFIC_DEPENDENCIES> \
    && apt clean all \
    && rm -rf /var/lib/apt/lists/*

RUN pip3 install btc2fiat

COPY --from=golang-builder /build/apps/charge-lnd/ /opt/charge-lnd/
COPY --from=golang-builder /build/apps/igniter/ /opt/igniter/
COPY --from=golang-builder /build/apps/perfectly-balanced/ /opt/perfectly-balanced/
COPY --from=golang-builder /build/apps/rebalance-lnd/ /opt/rebalance-lnd/
COPY --from=golang-builder /build/apps/suez/ /opt/suez/

RUN chmod +x /opt/igniter/igniter.sh /opt/perfectly-balanced/perfectlybalanced.sh

RUN cd /opt/charge-lnd \
 && <INSTALL_MAYBE_NO_GRPC> \
 && python3 setup.py install \
 && rm -rf /opt/charge-lnd \
 && cd /opt/rebalance-lnd \
 && <INSTALL_MAYBE_NO_GRPC> \
 && cd /opt/suez \
 && <INSTALL_MAYBE_NO_GRPC>

COPY \
    --from=golang-builder \
    /build/apps/circuitbreaker/bin/circuitbreaker \
    /lnd/lncli \
    /build/apps/lntop/bin/lntop \
    /build/apps/mempool-cli/bin/mempool-cli \
    /build/apps/sc-im/src/sc-im \
    /build/apps/sc-im/src/scopen \
    /build/apps/ttyd/build/ttyd \
    /build/apps/whatsat/bin/whatsat \
    /build/apps/weechat/build/src/gui/curses/normal/weechat \
    /usr/local/bin/
COPY \
    --from=golang-builder \
    /usr/local/lib/libwebsockets.so \
    /usr/local/lib/libwebsockets.so.19 \
    /usr/local/lib/libwebsockets-evlib_uv.so \
    /usr/local/lib/
COPY --from=golang-builder /usr/local/lib/weechat/plugins/ /usr/local/lib/weechat/plugins/

ENV LD_LIBRARY_PATH /usr/local/lib/

COPY --from=golang-builder /build/apps/sc-im/src/sc-im.1 /usr/local/share/man/man1/
COPY --from=golang-builder /build/apps/apps.7.gz /usr/share/man/man7/
COPY --from=rust-builder /build/apps/dog/man/dog.1.gz /usr/local/share/man/man1/

COPY \
    --from=rust-builder \
    /build/apps/csview/target/release/csview \
    /build/apps/dog/target/release/dog \
    /build/apps/gping/target/release/gping \
    /build/apps/oha/target/release/oha \
    /usr/local/bin/

#COPY --from=rust-builder /build/apps/tickrs/target/release/tickrs /usr/local/bin/

# VERSION_SPECIFIC_COPY_STEPS

COPY motd /etc/motd
COPY start.sh lsh_exec.sh /
RUN chmod +x /start.sh

# The node container already has an user called node, rename it
RUN groupmod --new-name lnshell node && usermod --login lnshell --move-home --home /home/lnshell node

USER lnshell
WORKDIR /home/lnshell

ARG version
RUN mkdir -p /home/lnshell/.local/bin /home/lnshell/.local/share
COPY --chown=lnshell:lnshell install-apps.sh bin/* /home/lnshell/.local/bin/
COPY --chown=lnshell:lnshell apps/apps.json /home/lnshell/.local/share
RUN /bin/bash /home/lnshell/.local/bin/install-apps.sh \
 && chmod +x /home/lnshell/.local/bin/* \
 && echo "PATH=~/.local/bin:$PATH; export PATH" >> /home/lnshell/.bashrc \
 && echo "cat /etc/motd" >> /home/lnshell/.bashrc \
 && echo "${version}" > /home/lnshell/.lnshell-version

EXPOSE 7681

ENV APP_PASSWORD=

ENV USERNAME=umbrel

CMD [ "/start.sh" ]
