ARG lnd_version=v0.14.1-beta

ARG balanceofsatoshis_tag=v11.44.0

FROM golang:1.17-${DEBIAN_VERSION} AS golang-builder

ARG arch

RUN apt-get update \
    && apt-get install -y bison build-essential cmake curl git gnupg libjson-c-dev libncurses-dev libwebsockets-dev pkg-config \
    && apt clean all

WORKDIR /build

COPY . /build

# getting lnd
ARG lnd_version
RUN curl -sSL -o /build/lnd-linux-${arch}-${lnd_version}.tar.gz https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz
RUN curl -sSL -o /build/manifest-guggero-${lnd_version}.sig https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig
RUN curl -sSL -o /build/manifest-${lnd_version}.txt https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt
RUN curl https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --import
RUN cd /build && gpg --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt && tar xzf lnd-linux-${arch}-${lnd_version}.tar.gz && mv lnd-linux-${arch}-${lnd_version} /lnd

ENV GOARCH=${arch}
ENV GOOS=linux
RUN cd /build/apps/lntop && mkdir bin && go build -o bin/lntop cmd/lntop/main.go

RUN cd /build/apps/sc-im/src && make

RUN cd /build/apps/libwebsockets && mkdir build && cd build && cmake .. -DLWS_WITH_LIBUV=ON && make && make install

RUN cd /build/apps/ttyd && mkdir build && cd build && cmake .. && make

# VERSION_SPECIFIC_BUILD_STEPS

FROM rustlang/rust:nightly-${DEBIAN_VERSION}-slim AS rust-builder

RUN apt-get update \
    && apt-get install -y git gzip libssl-dev pandoc pkg-config \
    && apt clean all

WORKDIR /build

COPY . /build

RUN cd /build/apps/csview && cargo build --release

RUN cd /build/apps/dog && cargo build --release
RUN pandoc /build/apps/dog/man/dog.1.md -s -t man | gzip > /build/apps/dog/man/dog.1.gz

RUN cd /build/apps/gping && cargo build --release

RUN cd /build/apps/oha && cargo build --release

FROM node:16-${DEBIAN_VERSION}-slim

ARG balanceofsatoshis_tag
RUN npm i -g balanceofsatoshis@${balanceofsatoshis_tag}

RUN echo "deb http://deb.debian.org/debian ${DEBIAN_VERSION}-backports main" | tee -a /etc/apt/sources.list

RUN apt update \
    && apt upgrade -y \
    && apt install -y --no-install-recommends bc ca-certificates curl git iputils-ping jq libc6 libcap2 libssl1.1 libuv1 links micro nano pandoc procps python3 python3-pip python3-venv python3-wheel screen sysstat tini tmux vim zlib1g <VERSION_SPECIFIC_DEPENDENCIES> \
    && apt clean all \
    && rm -rf /var/lib/apt/lists/*

RUN curl -sSL https://install.python-poetry.org | python3 -

RUN pip3 install jinja2-cli

RUN mkdir -p /opt

COPY . /build

RUN cd /build/apps/charge-lnd && <INSTALL_MAYBE_NO_GRPC> && python3 setup.py install

RUN cp -r /build/apps/igniter /opt/igniter && chmod +x /opt/igniter/igniter.sh

RUN cp -r /build/apps/perfectly-balanced /opt/perfectly-balanced && chmod +x /opt/perfectly-balanced/perfectlybalanced.sh

RUN cd /build/apps/rebalance-lnd && <INSTALL_MAYBE_NO_GRPC> \
 && cp -r /build/apps/rebalance-lnd /opt/rebalance-lnd

RUN cd /build/apps/suez && /root/.local/bin/poetry export -f requirements.txt --output requirements.txt --without-hashes && pip3 install -r requirements.txt \
 && cp -r /build/apps/suez /opt/suez

RUN jinja2 /build/apps/apps.7.md /build/apps/apps.json | pandoc -s -t man | gzip > /usr/share/man/man7/apps.7.gz

COPY --from=golang-builder /lnd/lncli /bin/
COPY --from=golang-builder /build/apps/lntop/bin/lntop /bin/
COPY --from=golang-builder /build/apps/sc-im/src/sc-im /usr/bin/
COPY --from=golang-builder /build/apps/sc-im/src/scopen /usr/bin/
COPY --from=golang-builder /build/apps/sc-im/src/sc-im.1 /usr/share/man/man1/
COPY --from=golang-builder /usr/local/lib/libwebsockets.so /usr/local/lib/
COPY --from=golang-builder /usr/local/lib/libwebsockets.so.19 /usr/local/lib/
COPY --from=golang-builder /usr/local/lib/libwebsockets-evlib_uv.so /usr/local/lib/
ENV LD_LIBRARY_PATH /usr/local/lib/
COPY --from=golang-builder /build/apps/ttyd/build/ttyd /usr/bin/

COPY --from=rust-builder /build/apps/csview/target/release/csview /bin/
COPY --from=rust-builder /build/apps/dog/target/release/dog /bin/
COPY --from=rust-builder /build/apps/dog/man/dog.1.gz /usr/share/man/man1/
COPY --from=rust-builder /build/apps/gping/target/release/gping /bin/
COPY --from=rust-builder /build/apps/oha/target/release/oha /bin/

# VERSION_SPECIFIC_COPY_STEPS

COPY motd /etc/motd

# The node container already has an user called node, rename it
RUN groupmod --new-name lnshell node && usermod --login lnshell --move-home --home /home/lnshell node

USER lnshell
WORKDIR /home/lnshell

ARG version
RUN mkdir -p /home/lnshell/.local/bin
COPY bin/* /home/lnshell/.local/bin/
RUN /build/install-apps.sh
RUN echo "PATH=~/.local/bin:$PATH; export PATH" >> /home/lnshell/.bashrc
RUN echo "cat /etc/motd" >> /home/lnshell/.bashrc
RUN echo "${version}" > /home/lnshell/.lnshell-version

EXPOSE 7681

ENV APP_PASSWORD=

ENV USERNAME=umbrel

ENTRYPOINT /usr/bin/tini /usr/bin/ttyd -- --credential ${USERNAME}:${APP_PASSWORD} bash
